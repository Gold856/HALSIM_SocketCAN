
plugins {
  id 'cpp'
  id 'java'
  id 'edu.wpi.first.wpilib.repositories.WPILibRepositoriesPlugin' version '2020.1'
  id 'edu.wpi.first.NativeUtils' version '2020.4.1'
  id 'edu.wpi.first.GradleJni' version '0.9.1'
  id 'edu.wpi.first.GradleVsCode' version '0.9.6'
}

repositories {
  mavenCentral()
}
if (project.hasProperty('releaseMode')) {
  wpilibRepositories.addAllReleaseRepositories(project)
} else {
  wpilibRepositories.addAllDevelopmentRepositories(project)
}

// Apply C++ configuration
apply from: 'config.gradle'

// Apply Java configuration
dependencies {
    compile 'edu.wpi.first.wpiutil:wpiutil-java:2019.+'
    compile 'edu.wpi.first.hal:hal-java:2019.+'
}

// Set up exports properly
nativeUtils {
  privateExportsConfigs {
    // Only export explicit symbols from driver library
    HALSIM_SocketCAN {
      exportsFile = project.file("src/main/driver/symbols.txt")
    }
  }
}

model {
  components {
    HALSIM_SocketCAN(JniNativeLibrarySpec) {
      enableCheckTask true
      javaCompileTasks << compileJava
      jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.roborio)
      jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.raspbian)
      jniCrossCompileOptions << JniCrossCompileOptions(nativeUtils.wpi.platforms.aarch64bionic)
      sources {
        cpp {
          source {
            srcDirs 'src/main/driver/cpp'
            include '**/*.cpp'
          }
          exportedHeaders {
            srcDirs 'src/main/driver/include'
          }
        }
      }

       nativeUtils.useRequiredLibrary(it, "driver_shared")
    }
  }
}

apply from: 'publish.gradle'

wrapper {
  gradleVersion '5.4.1'
}
